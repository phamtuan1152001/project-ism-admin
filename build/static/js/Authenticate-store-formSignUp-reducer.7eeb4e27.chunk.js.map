{"version":3,"sources":["Modules/Authenticate/store/formSignUp/reducer.js","utility/StoreMethod.js"],"names":["reduxFormGenerate","generateFormSubmitRedux","types","actions","defaultState","handleActions","PAGE_DEFAULT","LIMIT_DEFAULT","name","nameUp","toUpperCase","createAction","state","payload","Array","isArray","keepDataResponse","generateFormSubmitSagas","service","put","select","getCodeLanguage","codeLanguage","call","res","data","status","SUCCESS","retCode","RETCODE_SUCCESS","error","console"],"mappings":"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","file":"static/js/Authenticate-store-formSignUp-reducer.7eeb4e27.chunk.js","sourcesContent":["import {handleActions} from 'redux-actions'\r\nimport {\r\n    generateFormSubmitRedux\r\n} from '@utility/StoreMethod'\r\nconst name = \"formSignUp\"\r\nconst reduxFormGenerate = generateFormSubmitRedux(name)\r\n\r\nexport const types = {\r\n    ...reduxFormGenerate.types\r\n}\r\n\r\nexport const actions = {\r\n    ...reduxFormGenerate.actions\r\n}\r\n\r\nconst defaultState = {\r\n    ...reduxFormGenerate.defaultState\r\n}\r\n\r\nexport default handleActions(\r\n    {\r\n        ...reduxFormGenerate.handleActions\r\n    },\r\n    defaultState\r\n)\r\n","import { createAction } from \"redux-actions\"\r\nimport { call, put, select } from \"redux-saga/effects\"\r\nimport {\r\n  SUCCESS,\r\n  PAGE_DEFAULT,\r\n  LIMIT_DEFAULT,\r\n  RETCODE_SUCCESS\r\n} from \"../configs/contants\"\r\nimport { getCodeLanguage } from \"@store/common/selectors\"\r\n\r\nconst PAGE_INIT = PAGE_DEFAULT\r\nconst UNIT_INCREASE = 1\r\nconst LIMIT = LIMIT_DEFAULT\r\n\r\nexport const generateListRedux = (name) => {\r\n  const nameUp = name.toUpperCase()\r\n\r\n  const types = {\r\n    SET_LIST_LOADING: `SET_LIST_${nameUp}_LOADING`,\r\n    SET_PAGE_LIST_DEFAULT: `SET_PAGE_LIST_${nameUp}_DEFAULT`,\r\n    SET_LIST_LOADING_LOAD_MORE: `SET_LIST_${nameUp}_LOADING_LOAD_MORE`,\r\n    GET_LIST: `GET_LIST_${nameUp}`,\r\n    GET_LIST_SUCCESS: `GET_LIST_${nameUp}_SUCCESS`,\r\n    GET_LIST_FAILED: `GET_LIST_${nameUp}_FAILED`,\r\n    GET_LIST_LOAD_MORE: `GET_LIST_${nameUp}_LOAD_MORE`,\r\n    GET_LIST_LOAD_MORE_SUCCESS: `GET_LIST_${nameUp}_LOAD_MORE_SUCCESS`,\r\n    GET_LIST_LOAD_MORE_FAILED: `GET_LIST_${nameUp}_LOAD_MORE_FAILED`,\r\n    CLEAR_LIST: `CLEAR_LIST_${nameUp}`\r\n  }\r\n\r\n  const actions = {\r\n    setListLoading: createAction(types.SET_LIST_LOADING),\r\n    getList: createAction(types.GET_LIST),\r\n    getListSuccess: createAction(types.GET_LIST_SUCCESS),\r\n    getListFailed: createAction(types.GET_LIST_FAILED),\r\n    setPageListDefault: createAction(types.SET_PAGE_LIST_DEFAULT),\r\n    setListLoadingLoadMore: createAction(types.SET_LIST_LOADING_LOAD_MORE),\r\n    getListLoadMore: createAction(types.GET_LIST_LOAD_MORE),\r\n    getListLoadMoreSuccess: createAction(types.GET_LIST_LOAD_MORE_SUCCESS),\r\n    getListLoadMoreFailed: createAction(types.GET_LIST_LOAD_MORE_FAILED),\r\n    clearList: createAction(types.CLEAR_LIST)\r\n  }\r\n\r\n  const defaultState = {\r\n    page: PAGE_INIT,\r\n    limit: LIMIT,\r\n    list: [],\r\n    loading: false,\r\n    listMoreLoading: false,\r\n    hasLoadMore: false,\r\n    total: 0,\r\n    error: false\r\n  }\r\n\r\n  const handleActions = {\r\n    [types.SET_LIST_LOADING]: (state, { payload }) => {\r\n      return { ...state, loading: payload }\r\n    },\r\n    [types.GET_LIST_SUCCESS]: (state, { payload }) => {\r\n      const { hasMore, total, page, data } = payload\r\n      return {\r\n        ...state,\r\n        page,\r\n        hasLoadMore: hasMore,\r\n        list: data,\r\n        total,\r\n        error: false\r\n      }\r\n    },\r\n    [types.GET_LIST_FAILED]: (state, { payload }) => {\r\n      return {\r\n        page: PAGE_INIT,\r\n        limit: LIMIT,\r\n        list: [],\r\n        total: 0,\r\n        error: true\r\n      }\r\n    },\r\n    [types.SET_PAGE_LIST_DEFAULT]: (state, { payload }) => {\r\n      return {\r\n        ...state,\r\n        page: PAGE_INIT,\r\n        limit: LIMIT\r\n      }\r\n    },\r\n    [types.SET_LIST_LOADING_LOAD_MORE]: (state, { payload }) => {\r\n      return { ...state, listMoreLoading: payload }\r\n    },\r\n    [types.GET_LIST_LOAD_MORE_SUCCESS]: (state, { payload }) => {\r\n      const { hasMore, total, page, data } = payload\r\n      const list = state.list?.concat(data) || []\r\n      return {\r\n        ...state,\r\n        list,\r\n        page,\r\n        hasLoadMore: hasMore,\r\n        total,\r\n        error: false\r\n      }\r\n    },\r\n    [types.GET_LIST_LOAD_MORE_FAILED]: (state, { payload }) => {\r\n      return { ...state, error: true }\r\n    },\r\n    [types.CLEAR_LIST]: (state, { payload }) => {\r\n      return { ...defaultState }\r\n    }\r\n  }\r\n\r\n  return {\r\n    types,\r\n    actions,\r\n    defaultState,\r\n    handleActions\r\n  }\r\n}\r\n\r\nexport const generateListSagas = (actions, service) => {\r\n  return {\r\n    *getList({ payload }) {\r\n      try {\r\n        // console.log(\"GET LIST CALL GENERATE FUC\", payload)\r\n        yield put(actions.setListLoading(true))\r\n        yield put(actions.setPageListDefault())\r\n        const codeLanguage = yield select(getCodeLanguage)\r\n        // console.log(\"CODE LANG\", codeLanguage)\r\n        const res = yield call(service.getListService, {\r\n          payload,\r\n          codeLanguage\r\n        })\r\n        // console.log(\"RES CALL\", res)\r\n        const { data } = res\r\n        if (res.status === SUCCESS) {\r\n          if (data.retCode === RETCODE_SUCCESS) {\r\n            yield put(actions.getListSuccess(data))\r\n          } else {\r\n            yield put(actions.getListFailed())\r\n          }\r\n        }\r\n      } catch (e) {\r\n        console.error(e)\r\n      } finally {\r\n        yield put(actions.setListLoading(false))\r\n      }\r\n    },\r\n    *getLoadMoreList({ payload }) {\r\n      try {\r\n        yield put(actions.setListLoadingLoadMore(true))\r\n        const codeLanguage = yield select(getCodeLanguage)\r\n        const res = yield call(service.getListService, {\r\n          payload,\r\n          codeLanguage\r\n        })\r\n        const { data } = res\r\n        if (res.status === SUCCESS) {\r\n          if (data.retCode === RETCODE_SUCCESS) {\r\n            yield put(actions.getListLoadMoreSuccess(res.data))\r\n          } else {\r\n            yield put(actions.getListLoadMoreFailed())\r\n          }\r\n        }\r\n      } catch (e) {\r\n        console.error(e)\r\n      } finally {\r\n        yield put(actions.setListLoadingLoadMore(false))\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const generateFormSubmitRedux = (name) => {\r\n  const nameUp = name.toUpperCase()\r\n  const types = {\r\n    [`${nameUp}_METHOD`]: `${nameUp}_METHOD`,\r\n    [`${nameUp}_LOADING`]: `${nameUp}_LOADING`,\r\n    [`${nameUp}_SUCCESS`]: `${nameUp}_SUCCESS`,\r\n    [`${nameUp}_ERROR`]: `${nameUp}_ERROR`,\r\n    [`${nameUp}_RESET`]: `${nameUp}_RESET`\r\n  }\r\n\r\n  const actions = {\r\n    [`${name}FnMethod`]: createAction(`${nameUp}_METHOD`),\r\n    [`${name}FnLoading`]: createAction(`${nameUp}_LOADING`),\r\n    [`${name}FnSuccess`]: createAction(`${nameUp}_SUCCESS`),\r\n    [`${name}FnError`]: createAction(`${nameUp}_ERROR`),\r\n    [`${name}FnReset`]: createAction(`${nameUp}_RESET`)\r\n  }\r\n\r\n  const defaultState = {\r\n    [`${name}Loading`]: false,\r\n    [`${name}Success`]: false,\r\n    [`${name}Error`]: false,\r\n    [`${name}DataResponse`]: null\r\n  }\r\n\r\n  const handleActions = {\r\n    [`${nameUp}_LOADING`]: (state, { payload }) => {\r\n      return { ...state, [`${name}Loading`]: payload }\r\n    },\r\n    [`${nameUp}_SUCCESS`]: (state, { payload }) => {\r\n      return {\r\n        ...state,\r\n        [`${name}Error`]: false,\r\n        [`${name}Success`]: true,\r\n        [`${name}DataResponse`]: Array.isArray(payload)\r\n          ? [...payload]\r\n          : typeof payload === \"object\"\r\n          ? { ...payload }\r\n          : payload\r\n      }\r\n    },\r\n    [`${nameUp}_ERROR`]: (state, { payload }) => {\r\n      return {\r\n        ...state,\r\n        [`${name}Success`]: false,\r\n        [`${name}Error`]: true,\r\n        [`${name}DataResponse`]:\r\n          typeof payload === \"object\" ? { ...payload } : payload\r\n      }\r\n    },\r\n    [`${nameUp}_RESET`]: (state, { payload }) => {\r\n      return {\r\n        [`${name}Loading`]: false,\r\n        [`${name}Success`]: false,\r\n        [`${name}Error`]: false,\r\n        [`${name}DataResponse`]: payload?.keepDataResponse\r\n          ? state[`${name}DataResponse`]\r\n          : null\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    types,\r\n    actions,\r\n    defaultState,\r\n    handleActions\r\n  }\r\n}\r\n\r\nexport const generateFormSubmitSagas = (name, actions, service) => {\r\n  return {\r\n    *[`${name}CallMethod`]({ payload }) {\r\n      try {\r\n        yield put(actions[`${name}FnLoading`](true))\r\n        const codeLanguage = yield select(getCodeLanguage)\r\n        const res = yield call(service[`${name}CallMethod`], {\r\n          payload,\r\n          codeLanguage\r\n        })\r\n        const { data } = res\r\n        if (res.status === SUCCESS) {\r\n          if (data.retCode === RETCODE_SUCCESS) {\r\n            yield put(actions[`${name}FnSuccess`](data.data))\r\n          } else {\r\n            yield put(actions[`${name}FnError`]({ error: data }))\r\n          }\r\n        } else {\r\n          yield put(actions[`${name}FnError`]({ error: \"system_error\" }))\r\n        }\r\n      } catch (e) {\r\n        console.error(e)\r\n        yield put(actions[`${name}FnError`]({ error: \"system_error\" }))\r\n      } finally {\r\n        yield put(actions[`${name}FnLoading`](false))\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""}