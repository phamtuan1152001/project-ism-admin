{"version":3,"sources":["Modules/Authenticate/configs/validation.js","utility/Utils.js"],"names":["getValueForm","valuesDefault","username","password","validationSchema","i18n","Yup","shape","nullable","required","messageError","t","message","field","params","str","i","replace","value","RegExp","emailRegex","phoneRegex"],"mappings":"+PAGaA,EAAe,WAAyB,IAAxBC,EAAa,uDAAG,CAAC,EAC5C,OAAO,aACLC,SAAU,GACVC,SAAU,IACPF,EAEP,EAEaG,EAAmB,SAAAC,GAC9B,OAAOC,MAAaC,MAAM,CACxBL,SAAUI,MACPE,WACAC,SACCC,YACEL,EAAKM,EAAE,uBACPN,EAAKM,EAAE,gCAGbR,SAAUG,MACPE,WACAC,SACCC,YACEL,EAAKM,EAAE,uBACPN,EAAKM,EAAE,gCAIjB,C,kJCsDaD,EAAe,SAACE,EAASC,GAAwB,IAAjBC,EAAM,uDAAG,CAAC,EACjDC,EAAMH,EAEV,IAAK,IAAMI,KADXD,EAAMA,EAAIE,QAAQ,cAAeJ,GACjBC,EAAQ,CACtB,IAAMI,EAAQJ,EAAOE,GACrBD,EAAMA,EAAIE,QAAQ,IAAIE,OAAOH,EAAG,MAAOE,EACzC,CACA,OAAOH,CACT,EAEaK,EAAa,8CAoBbC,EAAa,mD","file":"static/js/Authenticate-configs-validation.243402a4.chunk.js","sourcesContent":["import * as Yup from 'yup'\r\nimport {messageError} from '@utils'\r\n\r\nexport const getValueForm = (valuesDefault = {}) => {\r\n  return {\r\n    username: '',\r\n    password: '',\r\n    ...valuesDefault\r\n  }\r\n}\r\n\r\nexport const validationSchema = i18n => {\r\n  return Yup.object().shape({\r\n    username: Yup.string()\r\n      .nullable()\r\n      .required(\r\n        messageError(\r\n          i18n.t('validation:required'),\r\n          i18n.t('FormSignIn:field:user_name')\r\n        )\r\n      ),\r\n    password: Yup.string()\r\n      .nullable()\r\n      .required(\r\n        messageError(\r\n          i18n.t('validation:required'),\r\n          i18n.t('FormSignIn:field:password')\r\n        )\r\n      )\r\n  })\r\n}\r\n","// ** Checks if an object is empty (returns boolean)\r\nexport const isObjEmpty = (obj) => Object.keys(obj).length === 0;\r\n\r\n// ** Returns K format from a number\r\nexport const kFormatter = (num) =>\r\n  num > 999 ? `${(num / 1000).toFixed(1)}k` : num;\r\n\r\n// ** Converts HTML to string\r\nexport const htmlToString = (html) => html.replace(/<\\/?[^>]+(>|$)/g, '');\r\n\r\n// ** Checks if the passed date is today\r\nconst isToday = (date) => {\r\n  const today = new Date();\r\n  return (\r\n    /* eslint-disable operator-linebreak */\r\n    date.getDate() === today.getDate() &&\r\n    date.getMonth() === today.getMonth() &&\r\n    date.getFullYear() === today.getFullYear()\r\n    /* eslint-enable */\r\n  );\r\n};\r\n\r\n/**\r\n ** Format and return date in Humanize format\r\n ** Intl docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\r\n ** Intl Constructor: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\r\n * @param {String} value date to format\r\n * @param {Object} formatting Intl object to format with\r\n */\r\nexport const formatDate = (\r\n  value,\r\n  formatting = { month: 'short', day: 'numeric', year: 'numeric' }\r\n) => {\r\n  if (!value) return value;\r\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value));\r\n};\r\n\r\n// ** Returns short month of passed date\r\nexport const formatDateToMonthShort = (value, toTimeForCurrentDay = true) => {\r\n  const date = new Date(value);\r\n  let formatting = { month: 'short', day: 'numeric' };\r\n\r\n  if (toTimeForCurrentDay && isToday(date)) {\r\n    formatting = { hour: 'numeric', minute: 'numeric' };\r\n  }\r\n\r\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value));\r\n};\r\n\r\n/**\r\n ** Return if user is logged in\r\n ** This is completely up to you and how you want to store the token in your frontend application\r\n *  ? e.g. If you are using cookies to store the application please update this function\r\n */\r\nexport const isUserLoggedIn = () => localStorage.getItem('userData');\r\nexport const getUserData = () => JSON.parse(localStorage.getItem('userData'));\r\n\r\n/**\r\n ** This function is used for demo purpose route navigation\r\n ** In real app you won't need this function because your app will navigate to same route for each users regardless of ability\r\n ** Please note role field is just for showing purpose it's not used by anything in frontend\r\n ** We are checking role just for ease\r\n * ? NOTE: If you have different pages to navigate based on user ability then this function can be useful. However, you need to update it.\r\n * @param {String} userRole Role of user\r\n */\r\nexport const getHomeRouteForLoggedInUser = (userRole) => {\r\n  if (userRole === 'admin') return '/';\r\n  if (userRole === 'client') return '/access-control';\r\n  return '/login';\r\n};\r\n\r\n// ** React Select Theme Colors\r\nexport const selectThemeColors = (theme) => ({\r\n  ...theme,\r\n  colors: {\r\n    ...theme.colors,\r\n    primary25: '#7367f01a', // for option hover bg-color\r\n    primary: '#7367f0', // for selected option bg-color\r\n    neutral10: '#7367f0', // for tags bg-color\r\n    neutral20: '#ededed', // for input border-color\r\n    neutral30: '#ededed', // for input hover border-color\r\n  },\r\n});\r\n\r\nexport const messageError = (message, field, params = {}) => {\r\n  let str = message;\r\n  str = str.replace(/{_field_}/gi, field);\r\n  for (const i in params) {\r\n    const value = params[i];\r\n    str = str.replace(new RegExp(i, 'gi'), value);\r\n  }\r\n  return str;\r\n};\r\n\r\nexport const emailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n// export const phoneRegex = /^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/\r\nexport const emailOrPhoneRegex =\r\n  /((84|0[3|5|7|8|9])+([0-9]{8})\\b)|(^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$)/;\r\n\r\nexport const secretPhone = (phoneNumber = '') => {\r\n  phoneNumber = phoneNumber.replace(phoneNumber.substring(4, 6), '***');\r\n  return phoneNumber;\r\n};\r\n\r\nexport const messageFormat = (message, params = {}) => {\r\n  let str = message;\r\n  for (const i in params) {\r\n    const value = params[i];\r\n    str = str.replace(new RegExp(i, 'gi'), value);\r\n  }\r\n  return str;\r\n};\r\nexport const fullNameRegex =\r\n  /^[a-zA-ZÀÁÂÃÈÉÊẾÌÍÒÓÔÕÙÚĂĐĨŨƠàáâãèéêếìíòóôõùúăđĩũơƯĂẠẢẤẦẨẪẬẮẰẲẴẶ\" +\"ẸẺẼỀỀỂưăạảấầẩẫậắằẳẵặẹẻẽềềểỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪễệỉịọỏốồổỗộớờởỡợ\"+\"ụủứừỬỮỰỲỴÝỶỸửữựỳýỵỷỹ\\s]{1,50}$/;\r\nexport const phoneRegex = /([\\+84|84|0]+(3|5|7|8|9|1[2|6|8|9]))+([0-9]{8})\\b/;\r\nexport const usernameRegex = /^[a-zA-Z0-9_\\.]+$/;\r\n\r\n// ** Converts table to CSV\r\nexport const convertArrayOfObjectsToCSV = (array) => {\r\n  let result;\r\n\r\n  const columnDelimiter = ',';\r\n  const lineDelimiter = '\\n';\r\n  const keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  array.forEach((item) => {\r\n    let ctr = 0;\r\n    keys.forEach((key) => {\r\n      if (ctr > 0) result += columnDelimiter;\r\n\r\n      result += item[key];\r\n\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n};\r\n\r\nexport const isFireStoreVideo = (value) => {\r\n  return /https?:\\/\\/.*\\.(?:mov|mp4)\\?.*/.test(value);\r\n};\r\n\r\nexport const isFireStoreImages = (value) => {\r\n  return /https?:\\/\\/.*\\.(?:jpg|jpeg|png|gif)\\?.*/.test(value);\r\n};\r\n\r\nexport const removeAccents = (str) => {\r\n  const AccentsMap = [\r\n    'aàảãáạăằẳẵắặâầẩẫấậ',\r\n    'AÀẢÃÁẠĂẰẲẴẮẶÂẦẨẪẤẬ',\r\n    'dđ',\r\n    'DĐ',\r\n    'eèẻẽéẹêềểễếệ',\r\n    'EÈẺẼÉẸÊỀỂỄẾỆ',\r\n    'iìỉĩíị',\r\n    'IÌỈĨÍỊ',\r\n    'oòỏõóọôồổỗốộơờởỡớợ',\r\n    'OÒỎÕÓỌÔỒỔỖỐỘƠỜỞỠỚỢ',\r\n    'uùủũúụưừửữứự',\r\n    'UÙỦŨÚỤƯỪỬỮỨỰ',\r\n    'yỳỷỹýỵ',\r\n    'YỲỶỸÝỴ',\r\n  ];\r\n  for (let i = 0; i < AccentsMap.length; i++) {\r\n    const re = new RegExp('[' + AccentsMap[i].substr(1) + ']', 'g');\r\n    const char = AccentsMap[i][0];\r\n    str = str.replace(re, char);\r\n  }\r\n  return str;\r\n};\r\n"],"sourceRoot":""}