{"version":3,"sources":["Modules/Authenticate/configs/api.js","Modules/Authenticate/store/formVerifyAccountEmail/reducer.js","Modules/Authenticate/store/formVerifyAccountEmail/service.js","Modules/Authenticate/store/formVerifyAccountEmail/sagas.js","utility/StoreMethod.js"],"names":["POST_AUTH_SIGN_IN","POST_SEND_OTP","POST_SIGN_UP_TRIAL_ACCOUNT","POST_SIGN_UP_TRIAL_ACCOUNT_OTP","POST_UPDATE_TO_TRIAL_ACCOUNT","GET_TRIAL_ACCOUNT_INFO","POST_ACTIVE_CODE","POST_CHECK_ACTIVE_CODE","GET_VIDEO_TUTORIAL_ACTIVE_CODE","POST_AUTH_FORGOT_USERNAME","POST_AUTH_FORGOT_PASSWORD","POST_AUTH_VERIFY_ACCOUNT","POST_AUTH_VERIFY_PASSWORD","POST_AUTH_VERIFY_ACCOUNT_EMAIL","POST_AUTH_VERIFY_PASSWORD_EMAIL","POST_AUTH_FORGOT_USERNAME_EMAIL","POST_AUTH_FORGOT_PASSWORD_EMAIL","LOG_OUT","SIGN_IN_ACCOUNT","reduxFormGenerate","generateFormSubmitRedux","types","actions","defaultState","handleActions","formVerifyAccountEmailCallMethod","payload","type","apiMethod","post","API","email","otp","appId","APP_ID","userName","name","nameUp","toUpperCase","submitForm","generateFormSubmitSagas","service","takeLatest","PAGE_DEFAULT","LIMIT_DEFAULT","createAction","state","Array","isArray","keepDataResponse","put","select","getCodeLanguage","codeLanguage","call","res","data","status","SUCCESS","retCode","RETCODE_SUCCESS","error","console"],"mappings":"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","file":"static/js/Authenticate-store-formVerifyAccountEmail-sagas.81d252d8.chunk.js","sourcesContent":["export default {\r\n  /*Auth SuperSchoolMemory*/\r\n  POST_AUTH_SIGN_IN: \"/SieuTriNhoHocDuong/login\",\r\n  POST_SEND_OTP: \"/SieuTriNhoHocDuong/SendOTP\",\r\n  POST_SIGN_UP_TRIAL_ACCOUNT: \"/SieuTriNhoHocDuong/Register\",\r\n  POST_SIGN_UP_TRIAL_ACCOUNT_OTP: \"/SieuTriNhoHocDuong/RegisterWithOTP\",\r\n  POST_UPDATE_TO_TRIAL_ACCOUNT: \"/SieuTriNhoHocDuong/UpdateUserExperience\",\r\n  GET_TRIAL_ACCOUNT_INFO: \"/SieuTriNhoHocDuong/GetUserExperience\",\r\n  POST_ACTIVE_CODE: \"/SieuTriNhoHocDuong/ActiveCode\",\r\n  POST_CHECK_ACTIVE_CODE: \"/SieuTriNhoHocDuong/CheckCode\",\r\n  GET_VIDEO_TUTORIAL_ACTIVE_CODE: \"/SieuTriNhoHocDuong/ActiveCodeTutorial\",\r\n\r\n  // OTP phone\r\n  POST_AUTH_FORGOT_USERNAME: \"/AccountHelper/ForgetUsername\",\r\n  POST_AUTH_FORGOT_PASSWORD: \"/AccountHelper/ForgetPassword\",\r\n  POST_AUTH_VERIFY_ACCOUNT: \"/AccountHelper/OTPConfirmAccount\",\r\n  POST_AUTH_VERIFY_PASSWORD: \"/AccountHelper/OTPConfirmPassword\",\r\n\r\n  // OTP email\r\n  POST_AUTH_VERIFY_ACCOUNT_EMAIL: \"/AccountHelperEmail/OTPConfirmAccount\",\r\n  POST_AUTH_VERIFY_PASSWORD_EMAIL: \"/AccountHelperEmail/OTPConfirmPassword\",\r\n  POST_AUTH_FORGOT_USERNAME_EMAIL: \"/AccountHelperEmail/ForgetUsername\",\r\n  POST_AUTH_FORGOT_PASSWORD_EMAIL: \"/AccountHelperEmail/ForgetPassword\",\r\n\r\n  LOG_OUT: \"\",\r\n  /*End Auth SuperSchoolMemory*/\r\n\r\n  // contract\r\n\r\n  // new\r\n  SIGN_IN_ACCOUNT: \"/auth/signin\",\r\n  // end\r\n};\r\n","import { handleActions } from \"redux-actions\";\r\nimport { generateFormSubmitRedux } from \"@utility/StoreMethod\";\r\nconst name = \"formVerifyAccountEmail\";\r\nconst reduxFormGenerate = generateFormSubmitRedux(name);\r\n\r\nexport const types = {\r\n\t...reduxFormGenerate.types,\r\n};\r\n\r\nexport const actions = {\r\n\t...reduxFormGenerate.actions,\r\n};\r\n\r\nconst defaultState = {\r\n\t...reduxFormGenerate.defaultState,\r\n};\r\n\r\nexport default handleActions(\r\n\t{\r\n\t\t...reduxFormGenerate.handleActions,\r\n\t},\r\n\tdefaultState,\r\n);\r\n","import API from \"../../configs/api\";\r\nimport apiMethod from \"@utility/ApiMethod\";\r\nimport { APP_ID } from \"@configs/contants\";\r\n\r\nexport const formVerifyAccountEmailCallMethod = ({ payload }) => {\r\n\tif (payload.type === \"forgotUsername\") {\r\n\t\treturn apiMethod.post(API.POST_AUTH_VERIFY_ACCOUNT_EMAIL, {\r\n\t\t\temail: payload.email,\r\n\t\t\totp: payload.otp,\r\n\t\t\tappId: APP_ID,\r\n\t\t});\r\n\t} else {\r\n\t\treturn apiMethod.post(API.POST_AUTH_VERIFY_PASSWORD_EMAIL, {\r\n\t\t\temail: payload.email,\r\n\t\t\totp: payload.otp,\r\n\t\t\tuserName: payload.userName,\r\n\t\t\tappId: APP_ID,\r\n\t\t});\r\n\t}\r\n};\r\n","import { takeLatest } from \"redux-saga/effects\";\r\nimport { generateFormSubmitSagas } from \"@utility/StoreMethod\";\r\nimport { actions, types } from \"./reducer\";\r\nimport * as service from \"./service\";\r\n\r\nconst name = \"formVerifyAccountEmail\";\r\nconst nameUp = name.toUpperCase();\r\nconst sagaListFunction = generateFormSubmitSagas(name, actions, service);\r\nexport const submitForm = sagaListFunction[`${name}CallMethod`];\r\n\r\nexport default function* () {\r\n\tyield takeLatest(types[`${nameUp}_METHOD`], submitForm);\r\n}\r\n","import { createAction } from \"redux-actions\"\r\nimport { call, put, select } from \"redux-saga/effects\"\r\nimport {\r\n  SUCCESS,\r\n  PAGE_DEFAULT,\r\n  LIMIT_DEFAULT,\r\n  RETCODE_SUCCESS\r\n} from \"../configs/contants\"\r\nimport { getCodeLanguage } from \"@store/common/selectors\"\r\n\r\nconst PAGE_INIT = PAGE_DEFAULT\r\nconst UNIT_INCREASE = 1\r\nconst LIMIT = LIMIT_DEFAULT\r\n\r\nexport const generateListRedux = (name) => {\r\n  const nameUp = name.toUpperCase()\r\n\r\n  const types = {\r\n    SET_LIST_LOADING: `SET_LIST_${nameUp}_LOADING`,\r\n    SET_PAGE_LIST_DEFAULT: `SET_PAGE_LIST_${nameUp}_DEFAULT`,\r\n    SET_LIST_LOADING_LOAD_MORE: `SET_LIST_${nameUp}_LOADING_LOAD_MORE`,\r\n    GET_LIST: `GET_LIST_${nameUp}`,\r\n    GET_LIST_SUCCESS: `GET_LIST_${nameUp}_SUCCESS`,\r\n    GET_LIST_FAILED: `GET_LIST_${nameUp}_FAILED`,\r\n    GET_LIST_LOAD_MORE: `GET_LIST_${nameUp}_LOAD_MORE`,\r\n    GET_LIST_LOAD_MORE_SUCCESS: `GET_LIST_${nameUp}_LOAD_MORE_SUCCESS`,\r\n    GET_LIST_LOAD_MORE_FAILED: `GET_LIST_${nameUp}_LOAD_MORE_FAILED`,\r\n    CLEAR_LIST: `CLEAR_LIST_${nameUp}`\r\n  }\r\n\r\n  const actions = {\r\n    setListLoading: createAction(types.SET_LIST_LOADING),\r\n    getList: createAction(types.GET_LIST),\r\n    getListSuccess: createAction(types.GET_LIST_SUCCESS),\r\n    getListFailed: createAction(types.GET_LIST_FAILED),\r\n    setPageListDefault: createAction(types.SET_PAGE_LIST_DEFAULT),\r\n    setListLoadingLoadMore: createAction(types.SET_LIST_LOADING_LOAD_MORE),\r\n    getListLoadMore: createAction(types.GET_LIST_LOAD_MORE),\r\n    getListLoadMoreSuccess: createAction(types.GET_LIST_LOAD_MORE_SUCCESS),\r\n    getListLoadMoreFailed: createAction(types.GET_LIST_LOAD_MORE_FAILED),\r\n    clearList: createAction(types.CLEAR_LIST)\r\n  }\r\n\r\n  const defaultState = {\r\n    page: PAGE_INIT,\r\n    limit: LIMIT,\r\n    list: [],\r\n    loading: false,\r\n    listMoreLoading: false,\r\n    hasLoadMore: false,\r\n    total: 0,\r\n    error: false\r\n  }\r\n\r\n  const handleActions = {\r\n    [types.SET_LIST_LOADING]: (state, { payload }) => {\r\n      return { ...state, loading: payload }\r\n    },\r\n    [types.GET_LIST_SUCCESS]: (state, { payload }) => {\r\n      const { hasMore, total, page, data } = payload\r\n      return {\r\n        ...state,\r\n        page,\r\n        hasLoadMore: hasMore,\r\n        list: data,\r\n        total,\r\n        error: false\r\n      }\r\n    },\r\n    [types.GET_LIST_FAILED]: (state, { payload }) => {\r\n      return {\r\n        page: PAGE_INIT,\r\n        limit: LIMIT,\r\n        list: [],\r\n        total: 0,\r\n        error: true\r\n      }\r\n    },\r\n    [types.SET_PAGE_LIST_DEFAULT]: (state, { payload }) => {\r\n      return {\r\n        ...state,\r\n        page: PAGE_INIT,\r\n        limit: LIMIT\r\n      }\r\n    },\r\n    [types.SET_LIST_LOADING_LOAD_MORE]: (state, { payload }) => {\r\n      return { ...state, listMoreLoading: payload }\r\n    },\r\n    [types.GET_LIST_LOAD_MORE_SUCCESS]: (state, { payload }) => {\r\n      const { hasMore, total, page, data } = payload\r\n      const list = state.list?.concat(data) || []\r\n      return {\r\n        ...state,\r\n        list,\r\n        page,\r\n        hasLoadMore: hasMore,\r\n        total,\r\n        error: false\r\n      }\r\n    },\r\n    [types.GET_LIST_LOAD_MORE_FAILED]: (state, { payload }) => {\r\n      return { ...state, error: true }\r\n    },\r\n    [types.CLEAR_LIST]: (state, { payload }) => {\r\n      return { ...defaultState }\r\n    }\r\n  }\r\n\r\n  return {\r\n    types,\r\n    actions,\r\n    defaultState,\r\n    handleActions\r\n  }\r\n}\r\n\r\nexport const generateListSagas = (actions, service) => {\r\n  return {\r\n    *getList({ payload }) {\r\n      try {\r\n        // console.log(\"GET LIST CALL GENERATE FUC\", payload)\r\n        yield put(actions.setListLoading(true))\r\n        yield put(actions.setPageListDefault())\r\n        const codeLanguage = yield select(getCodeLanguage)\r\n        // console.log(\"CODE LANG\", codeLanguage)\r\n        const res = yield call(service.getListService, {\r\n          payload,\r\n          codeLanguage\r\n        })\r\n        // console.log(\"RES CALL\", res)\r\n        const { data } = res\r\n        if (res.status === SUCCESS) {\r\n          if (data.retCode === RETCODE_SUCCESS) {\r\n            yield put(actions.getListSuccess(data))\r\n          } else {\r\n            yield put(actions.getListFailed())\r\n          }\r\n        }\r\n      } catch (e) {\r\n        console.error(e)\r\n      } finally {\r\n        yield put(actions.setListLoading(false))\r\n      }\r\n    },\r\n    *getLoadMoreList({ payload }) {\r\n      try {\r\n        yield put(actions.setListLoadingLoadMore(true))\r\n        const codeLanguage = yield select(getCodeLanguage)\r\n        const res = yield call(service.getListService, {\r\n          payload,\r\n          codeLanguage\r\n        })\r\n        const { data } = res\r\n        if (res.status === SUCCESS) {\r\n          if (data.retCode === RETCODE_SUCCESS) {\r\n            yield put(actions.getListLoadMoreSuccess(res.data))\r\n          } else {\r\n            yield put(actions.getListLoadMoreFailed())\r\n          }\r\n        }\r\n      } catch (e) {\r\n        console.error(e)\r\n      } finally {\r\n        yield put(actions.setListLoadingLoadMore(false))\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const generateFormSubmitRedux = (name) => {\r\n  const nameUp = name.toUpperCase()\r\n  const types = {\r\n    [`${nameUp}_METHOD`]: `${nameUp}_METHOD`,\r\n    [`${nameUp}_LOADING`]: `${nameUp}_LOADING`,\r\n    [`${nameUp}_SUCCESS`]: `${nameUp}_SUCCESS`,\r\n    [`${nameUp}_ERROR`]: `${nameUp}_ERROR`,\r\n    [`${nameUp}_RESET`]: `${nameUp}_RESET`\r\n  }\r\n\r\n  const actions = {\r\n    [`${name}FnMethod`]: createAction(`${nameUp}_METHOD`),\r\n    [`${name}FnLoading`]: createAction(`${nameUp}_LOADING`),\r\n    [`${name}FnSuccess`]: createAction(`${nameUp}_SUCCESS`),\r\n    [`${name}FnError`]: createAction(`${nameUp}_ERROR`),\r\n    [`${name}FnReset`]: createAction(`${nameUp}_RESET`)\r\n  }\r\n\r\n  const defaultState = {\r\n    [`${name}Loading`]: false,\r\n    [`${name}Success`]: false,\r\n    [`${name}Error`]: false,\r\n    [`${name}DataResponse`]: null\r\n  }\r\n\r\n  const handleActions = {\r\n    [`${nameUp}_LOADING`]: (state, { payload }) => {\r\n      return { ...state, [`${name}Loading`]: payload }\r\n    },\r\n    [`${nameUp}_SUCCESS`]: (state, { payload }) => {\r\n      return {\r\n        ...state,\r\n        [`${name}Error`]: false,\r\n        [`${name}Success`]: true,\r\n        [`${name}DataResponse`]: Array.isArray(payload)\r\n          ? [...payload]\r\n          : typeof payload === \"object\"\r\n          ? { ...payload }\r\n          : payload\r\n      }\r\n    },\r\n    [`${nameUp}_ERROR`]: (state, { payload }) => {\r\n      return {\r\n        ...state,\r\n        [`${name}Success`]: false,\r\n        [`${name}Error`]: true,\r\n        [`${name}DataResponse`]:\r\n          typeof payload === \"object\" ? { ...payload } : payload\r\n      }\r\n    },\r\n    [`${nameUp}_RESET`]: (state, { payload }) => {\r\n      return {\r\n        [`${name}Loading`]: false,\r\n        [`${name}Success`]: false,\r\n        [`${name}Error`]: false,\r\n        [`${name}DataResponse`]: payload?.keepDataResponse\r\n          ? state[`${name}DataResponse`]\r\n          : null\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    types,\r\n    actions,\r\n    defaultState,\r\n    handleActions\r\n  }\r\n}\r\n\r\nexport const generateFormSubmitSagas = (name, actions, service) => {\r\n  return {\r\n    *[`${name}CallMethod`]({ payload }) {\r\n      try {\r\n        yield put(actions[`${name}FnLoading`](true))\r\n        const codeLanguage = yield select(getCodeLanguage)\r\n        const res = yield call(service[`${name}CallMethod`], {\r\n          payload,\r\n          codeLanguage\r\n        })\r\n        const { data } = res\r\n        if (res.status === SUCCESS) {\r\n          if (data.retCode === RETCODE_SUCCESS) {\r\n            yield put(actions[`${name}FnSuccess`](data.data))\r\n          } else {\r\n            yield put(actions[`${name}FnError`]({ error: data }))\r\n          }\r\n        } else {\r\n          yield put(actions[`${name}FnError`]({ error: \"system_error\" }))\r\n        }\r\n      } catch (e) {\r\n        console.error(e)\r\n        yield put(actions[`${name}FnError`]({ error: \"system_error\" }))\r\n      } finally {\r\n        yield put(actions[`${name}FnLoading`](false))\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""}